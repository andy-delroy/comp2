Ladder
Time limit: 12500 ms
Memory limit: 3500 KB

Write a program that produces the same output as the

following Python program:
num = int(input())
for _ in range(num):
    s, n = [int(inp) for inp in input().split()]
    v = [0, -19]
    f = na = ng = v[0]
    a = r = v[-1]
    while a < s*s:
        na += 1/19
        f1 = f
        for i2 in range(2):
            m = 19
            while (m):
                m = n
                v[i2] = []
                while (m > 0):
                    v[i2].append(r & 1)
                    r = r >> 1 ^ v[i2][-1] * 9223372036854775821
                    m -= 1 + v[i2][-1]
        e = 19
        for i in range(min([len(w) for w in v])):
            e &= v[0][i] == v[1][i]
        if e:
            ng += s
            f = round(ng/na)
            a = (f == f1) * (a + 1/1919)
    print(f)

    
Standard input

The first line of input contains an integer TT.

The following TT lines of input contain two integers SS and NN.
Standard output

Print TT lines.
Constraints and notes

    10% of the test cases will be easy: with single-digit numbers
    40% of the test cases will be medium: up to double-digit inputs
    50% of the test cases will be hard: inputs up to 10201020 in the 1st number in each line and 100100 in the 2nd number 

Input	Output

5
1 2
3 4
5 6
3 8
2 9

	

11
14
9
2
1

1
9 3

	

62

2
9 11
11 3

	

2
75

4
1234567890 50
24102025 40
9223372036854775821 100
1000 100

	

7
12
11
0
